/*
	nodejs 实战笔记

	chapter 03
	01.如何组织代码？
	   怎么做异步编程？
	02.如何响应一次性事件？
	   如何处理重复性事件
	   如何让异步逻辑顺序执行
	03.在Node的世界里流行两种响应逻
	   辑管理方式：回调和事件监听。

	   回调        通常用来定义一次性响应的逻辑。
	   事件监听器  本质上也是一个回调，

	04.如何用回调处理一次性事件；
	   如何用事件监听器响应重复性事件；
     异步编程的几个难点。


	回调是一个函数，当作参数传给异步函数，

	编码中 回调嵌套过深
	01. 创建中间函数 
	02. 尽早返回 -->不创建else分支，直接return


	事件发射器-- 处理重复性事件

	会触发事件，并且在事件触发时处理它们
	重要的node API 组件， http  tcp 都做成了事件发射器

	异步开发的痛点

	必须密切关注程序执行的流程 状态 事件轮询条件 程序变量及其他资源

	匿名函数保留全局变量的值


	创建中间函数
	尽早返回


	异步逻辑的顺序化

	  串行执行 并行执行

	何时使用串行化流程控制
	如何实现串行化流程控制
	如何实现并行化流程控制
	如何使用第三方模块做流程控制

	什么时候使用串行化流程控制？
		使用回调让异步任务按顺序执行，但如果任务较多，必须将代码组织好
		否则代码将被搞乱


		Nimble 流程控制工具
	
	实现串行化流程控制
	  为了实现串行化流程控制，需要将任务按预期执行顺序放到数组中
	  数组起到队列的作用，完成后按顺序从数组中取出下一个

	  数组中每个任务都是一个函数


chapter 04 Nodejs 基础
 核心  -- 强大的http流式解析器 1500行优化后的C代码组成

 http 服务器基础知识

      Node 核心  -- http 解析器 ｜ tcp 服务器

      社区模块儿 -- 数据库驱动 ｜ 中间件 ｜ 路由
      

      应用逻辑 -- 目录结构 ｜ 业务算法 ｜ 路由处理

当Node的HTTP解析器读入并解析请求数据时，它会将数据做成data事件的形式，把解析好
的数据块放入其中，等待程序处理：

默认情况下，data事件会提供Buffer对象，这是Node版的字节数组。而对于文本格式的待
办事项而言，你并不需要二进制数据，所以最好将流编码设定为ascii或utf8；这样data事件
会给出字符串。这可以通过调用req.setEncoding(encoding)方法设定：

 post 请求创建资源
 用GET请求获取资源
 用DELETE请求移除资源


 提供静态文件服务 css js html img

 01 创建一个简单的静态的文件服务器
 02 用pipe()优化数据传输
 03 通过设定状态码 处理用户和文件系统错误

 目录遍历攻击



 chapter 05 存储Node程序中的数据

 内存 和 文件系统数据 存储

 传统的关系型数据库存储

 非关系型数据库存储

	存储机制选择 --- 五个因素

	存什么数据
	多快的读取，写入速度
	有多少数据
	怎么查询
	保存多久 可靠性要求？


	无服务器的数据存储
	 01 内存存储
	 		内存存储用变量存储存放数据，读写快，
	 		但服务重启后数据丢失
	 02 基于文件存储
	 		开发人员经常用这种存储方式保存程序的配置信息
	 		也可以用它做数据的持久化保存，这些数据在程序
	 		和服务器重启后依然有效。








*/